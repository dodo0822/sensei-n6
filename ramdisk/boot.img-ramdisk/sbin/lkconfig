#!/system/bin/sh

detectsu=`ls /data/data`
[ -z "$detectsu" ] && echo "Must be superuser!" && exit

while true; do
mc=1

echo
echo "leanKernel configurator"
echo "---"
echo "0) display current settings"
echo
echo "1) set interactiveX screen_off_maxfreq"
echo "2) configure wake gesture control"
echo "3) set cpu boost"
echo "4) set charging led"
echo "5) set rgb control (advanced)"
echo "6) set rgb control (simple)"
echo "7) set vibe strength"
echo "8) set power saving mode for cpu scheduler"
echo
echo "10) drop caches to free up RAM for apps"
echo "11) check top 10 wake locks (ie. wakeup sources)"
echo
echo -n "please enter a number (or press enter to exit): "

read option

case $option in
0)
	echo
	echo "current settings"
	echo "----------------"
	echo -n "1) interactiveX screen off maxfreq: "
	value=`cat /sys/devices/system/cpu/cpufreq/interactive/screen_off_maxfreq`
	[ $value -gt 2600000 ] && echo "Disabled" || echo $value
	echo -n "2) wake gestures (stock dt2w - haptic dt2w - s2w): "
	sdt=`cat /sys/bus/i2c/devices/1-004a/tsp`
	hdt=`cat /sys/android_touch/doubletap2wake`
	s2w=`cat /sys/android_touch/sweep2wake`
	echo "$sdt - $hdt - $s2w"
	echo -n "3) cpu boost: "
	cat /sys/module/cpu_boost/parameters/cpuboost_enable
	echo -n "4) charging led: "
	value=`cat /sys/class/leds/charging/trigger`
 	case "$value" in
		*"[battery-charging]"*) echo "Enabled" ;;
		*) echo "Disabled" ;;
	esac
	echo -n "5-6) rgb control (red green blue): "
	cat /sys/devices/platform/kcal_ctrl.0/kcal
	echo -n "7) vibe strength: "
	cat /sys/vibrator/pwmvalue
	echo -n "8) cpu scheduler power saving mode: "
	cat /sys/devices/system/cpu/sched_balance_policy/current_sched_balance_policy
	;;
1)
	echo -n "Enter a number between 0 and 5 (0:650mhz,1:883mhz,2:1.2ghz,3:1.5ghz,4:2.2ghz/stock,5:disable): "
	read value
	case $value in
	  0) FREQ=652800;;
	  1) FREQ=883200;;
	  2) FREQ=1267200;;
	  3) FREQ=1574400;;
	  4) FREQ=2265600;;
	  5) FREQ=2649600;;
	  *) mc=0;;
	esac
	if [ $mc -eq 1 ]; then
	  [ $value -eq 5 ] && rm -f /data/data/leankernel/screen_off_maxfreq \
		|| echo $FREQ > /data/data/leankernel/screen_off_maxfreq
	  echo $FREQ > /sys/devices/system/cpu/cpufreq/interactive/screen_off_maxfreq
	  echo "Done! (also will persist at boot)"
	fi
	;;
2)
	echo -n "Enter 1 for stock dt2w, 2 for haptic dt2w, 3 for s2w, 4 for both, 0 to disable all (stock):"
	read value
	case $value in
	  1)
		echo 0 > /sys/android_touch/doubletap2wake
		rm -f /data/data/leankernel/doubletap2wake
		echo 0 > /sys/android_touch/sweep2wake
		rm -f /data/data/leankernel/sweep2wake
		echo AUTO > /sys/bus/i2c/devices/1-004a/tsp
		echo AUTO > /data/data/leankernel/tsp
		;;
	  2)
		echo OFF > /sys/bus/i2c/devices/1-004a/tsp
		rm -f /data/data/leankernel/tsp
		echo 0 > /sys/android_touch/sweep2wake
		rm -f /data/data/leankernel/sweep2wake
		echo 1 > /sys/android_touch/doubletap2wake
		echo 1 > /data/data/leankernel/doubletap2wake
		;;
	  3)
		echo OFF > /sys/bus/i2c/devices/1-004a/tsp
		rm -f /data/data/leankernel/tsp
		echo 0 > /sys/android_touch/doubletap2wake
		rm -f /data/data/leankernel/doubletap2wake
		echo 15 > /sys/android_touch/sweep2wake
		echo 15 > /data/data/leankernel/sweep2wake
		;;
	  4)
		echo OFF > /sys/bus/i2c/devices/1-004a/tsp
		rm -f /data/data/leankernel/tsp
		echo 1 > /sys/android_touch/doubletap2wake
		echo 1 > /data/data/leankernel/doubletap2wake
		echo 15 > /sys/android_touch/sweep2wake
		echo 15 > /data/data/leankernel/sweep2wake
		;;
	  0)
		echo OFF > /sys/bus/i2c/devices/1-004a/tsp
		rm -f /data/data/leankernel/tsp
		echo 0 > /sys/android_touch/sweep2wake
		rm -f /data/data/leankernel/sweep2wake
		echo 0 > /sys/android_touch/doubletap2wake
		rm -f /data/data/leankernel/doubletap2wake
		;;
	  *) mc=0;;
	esac
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
3)
        echo -n "Enter Y to enable (stock), N to disable cpu boost: "
        read value
	case $value in
	  Y|y)
		rm -f /data/data/leankernel/cpuboost_enable
		echo Y > /sys/module/cpu_boost/parameters/cpuboost_enable
		;;
	  N|n)
		echo N > /data/data/leankernel/cpuboost_enable
		echo N > /sys/module/cpu_boost/parameters/cpuboost_enable
		;;
	  *) mc=0;;
	esac
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
4)
        echo -n "Enter Y to enable, N to disable (stock) charging led: "
        read value
	case $value in
	  Y|y)
        	echo battery-charging > /data/data/leankernel/charging_led
		echo battery-charging > /sys/class/leds/charging/trigger
		echo 1 > /sys/class/leds/charging/max_brightness
		;;
	  N|n)
        	rm -f /data/data/leankernel/charging_led
		echo none > /sys/class/leds/charging/trigger
		;;
	  *) mc=0;;
	esac
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
5)
        echo -n "Enter three values (red, green, blue) between 0-255 (default is 255 255 255):"
        read value
	if [ -n "$value" ]; then
		echo "$value" > /data/data/leankernel/kcal
		echo "$value" > /sys/devices/platform/kcal_ctrl.0/kcal
		echo 1 > /sys/devices/platform/kcal_ctrl.0/kcal_ctrl
	else mc=0
	fi
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
6)
        echo -n "Enter 1 for reference(6500k), 2 for cool(7400k), 3 for stock(6250k):"
        read value
	case $value in
	  1) RGB="248 246 255";;
	  2) RGB="237 235 255";;
	  3) RGB="255 255 255";;
	  *) mc=0;;
	esac
	if [ $mc -eq 1 ]; then
	  [ $value -eq 3 ] && rm -f /data/data/leankernel/kcal || echo "$RGB" > /data/data/leankernel/kcal
	  echo "$RGB" > /sys/devices/platform/kcal_ctrl.0/kcal
	  echo 1 > /sys/devices/platform/kcal_ctrl.0/kcal_ctrl
	  echo "Done! (also will persist at boot)"
	fi
	;;
7) echo -n "Enter a number between 0 and 127 (stock) for vibe strength:"
        read value
	case $value in
	  127)
		rm -f /data/data/leankernel/pwmvalue
		echo 127 > /sys/vibrator/pwmvalue
		;;
	  *)
		if [ -n "$value" ] && [ $value -lt 127 ] && [ $value -ge 0 ]; then
		  echo "$value" > /data/data/leankernel/pwmvalue
		  echo "$value" > /sys/vibrator/pwmvalue
		else mc=0
		fi
		;;
	esac
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
8)
        echo -n "Enter 0 for performance (stock) or 1 for powersaving:"
        read value
	case $value in
	  0)
                rm -f /data/data/leankernel/current_sched_balance_policy
                echo performance > /sys/devices/system/cpu/sched_balance_policy/current_sched_balance_policy
		;;
	  1)
		echo powersaving > /data/data/leankernel/current_sched_balance_policy
		echo powersaving > /sys/devices/system/cpu/sched_balance_policy/current_sched_balance_policy
		;;
	  *) mc=0;;
	esac
	[ $mc -eq 1 ] && echo && echo "Done! (also will persist at boot)"
	;;
10)
	echo
	grep MemFree /proc/meminfo
	echo "Please wait..."
	sync
	echo 3 > /proc/sys/vm/drop_caches
	grep MemFree /proc/meminfo
	echo "Caches purged! You have more RAM for apps for a while."
	;;
11)
	echo
	if [ -a /system/xbin/awk ]; then
		echo "1st column: total time wakeup source has been active."
		echo "2nd column: max time the source was continuously active"
		echo "-----"
		cat /sys/kernel/debug/wakeup_sources | grep -v wakeup_count \
		  | awk '{ printf "%-10s%-8s %s\n",int($7/1000),int($8/1000),$1 }' \
		  | sort -rn | head -10
	else
		echo "busybox required!"
	fi
	;;
99)
	echo Y > /sys/module/selinux/parameters/force_audit;;
*)
	exit
	;;
esac
[ $mc -eq 0 ] && echo && echo "No change made."
echo
done
